require 'yaml'
require 'ostruct'
require 'match'
require 'match/git_helper'

fastlane_version "1.68.0"

default_platform :ios

# Load configuration
config_file = File.expand_path("config.yml")
begin
  config = YAML.load(open(config_file))
rescue
  Helper.log.error "Config file not found"
  Helper.log.error "Please add a config.yml file in your fastlane directory"
  Helper.log.error "Check http://github.com/platanus/fastlane-base for information"
  Helper.log.error "about the structure of the config file"
  exit 1
end

config = OpenStruct.new(config)
if config.stages.nil?
  Helper.log.error "Required key missing (stages)"
  Helper.log.error "Please add a stages key with the stages you want to define"
  exit 1
end

# Public methods

def cordova_project_path
  "platforms/ios/#{cordova_get_app_name}.xcodeproj"
end

# http://stackoverflow.com/questions/1939333/how-to-make-a-ruby-string-safe-for-a-filesystem
def app_name_sanitized
  cordova_get_app_name.gsub(/[^0-9A-Za-z.\- ]/, '_')
end

def cordova_plist_path
  "#{cordova_get_app_name}/#{cordova_get_app_name}-Info.plist"
end

def app_name_for(environment)
  if environment == "production"
    cordova_get_app_name
  else
    "#{cordova_get_app_name} - #{environment.capitalize}"
  end
end

def app_id_for(environment)
  if environment == "production"
    cordova_get_app_id
  else
    "#{cordova_get_app_id}.#{environment}"
  end
end

# Lanes
platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

    # increment_build_number

    # xctool # run the tests of your app
  end

  desc "Create app ids for each of the stages"
  lane :create do
    config.stages.each_key do |stage|
      stage_config = config.stages[stage]
      app_name = app_name_for(stage)
      app_id = app_id_for(stage)
      produce(
        username: stage_config["apple_id"],
        team_id: stage_config["team_id"],
        app_identifier: app_id,
        app_name: app_name
      )
    end
  end

  desc "Create necessary profiles and certificates"
  lane :certs do
    config.stages.each_key do |stage|
      app_id = app_id_for(stage)
      stage_config = config.stages[stage]

      %w(appstore development).each do |sign_type|
        match(
          username: stage_config["apple_id"],
          team_id: stage_config["team_id"],
          app_identifier: app_id,
          git_url: stage_config["certificates_url"],
          type: sign_type
        )
      end
    end
  end

  desc "Enable app services services"
  desc "Params:"
  desc "[enable|disable]:[services,...] to enable or disable a service"
  lane :service do |options|
    config.stages.each_key do |stage|
      options[:stage] = stage
      update_services(options)

      services_to_enable = options[:enable];

      if services_to_enable
        push_certs(options) if options[:enable].match /push/
      end
    end
  end

  desc "Deploy app to testflight or appstore"
  desc "Params:"
  desc "to: [apstore, testflight] Deployment destination"
  desc "stage: Application build environment"
  lane :deploy do |options|
    if options[:to] == 'testflight'
      do_testflight(options)
    elsif options[:to] == 'appstore'
      do_appstore(options)
    end
  end

  private_lane :build do |options|

    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for(stage)

    match(
      username: stage_config["apple_id"],
      team_id: stage_config["team_id"],
      app_identifier: app_id,
      git_url: stage_config["certificates_url"],
      type: "appstore",
      readonly: true
    )

    sh "cordova prepare --env=#{stage}"

    update_app_identifier(
      xcodeproj: cordova_project_path,
      plist_path: cordova_plist_path,
      app_identifier: app_id
    )

    recreate_schemes(
      project: cordova_project_path
    )

    update_project_team(
      path: cordova_project_path,
      teamid: stage_config["team_id"]
    )

    require 'xcodeproj'

    project = Xcodeproj::Project.open("../#{cordova_project_path}")
    project.targets.each do |target|
      target.build_configuration_list.build_configurations.each do |build_configuration|
        build_configuration.build_settings["PROVISIONING_PROFILE"] = "$(sigh_#{app_id}_appstore)"
      end
    end
    project.save

    gym(
      verbose: true,
      project: cordova_project_path,
      scheme: app_name_sanitized,
      xcconfig: "platforms/ios/cordova/build-release.xcconfig"
    )
  end

  desc "Upload to testflight"
  private_lane :do_testflight do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for(stage)

    build(options)

    pilot(
      username: stage_config["apple_id"],
      team_id: stage_config["team_id"],
      app_identifier: app_id,
      skip_submission: true
    )
  end

  desc "Upload the appstore"
  private_lane :do_appstore do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for(stage)

    build(options)

    deliver(
      username: stage_config["apple_id"],
      team_id: stage_config["team_id"],
      app_identifier: app_id,
      force: true,
      submit_for_review: false,
      skip_metadata: true,
      skip_screenshots: true
    )
  end

  desc "Update services using produce"
  private_lane :update_services do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for(stage)

    %w(enable disable).each do |state|
      next unless services = options[state.to_sym]

      produce_service(
        action: state,
        app_identifier: app_id,
        username: stage_config['apple_id'],
        team_id: stage_config['team_id'],
        services: services.split(",")
      )
    end
  end

  desc "Runs produce cli services to enable and disable"
  private_lane :produce_service do |options|
    command = []
    command << "produce #{options[:action]}_services"
    command << "--app_identifier #{options[:app_identifier]}"
    command << "--username #{options[:username]}"
    command << "--team_id #{options[:team_id]}"
    options[:services].each do |service|
      command << "--#{service}"
    end
    sh command.join(' ')
  end

  desc "Create and upload the push certificates"
  private_lane :push_certs do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for(stage)
    sandbox = stage != 'production'
    development = (stage =~ /staging|production/).nil?

    pem(
      app_identifier: app_id,
      username: stage_config['apple_id'],
      team_id: stage_config['team_id'],
      development: development,
      generate_p12: false,
      save_private_key: false,
      output_path: "./fastlane",
      new_profile: proc do |profile_path|
        require 'openssl'
        require 'aws-sdk'

        pem = File.read(profile_path)
        pkey = OpenSSL::PKey::RSA.new(pem)
        cert = OpenSSL::X509::Certificate.new(pem)

        Aws.config[:region] = 'us-east-1'
        sns = Aws::SNS::Client.new

        resp = sns.create_platform_application({
          name: app_id,
          platform: sandbox ? 'APNS_SANDBOX' : 'APNS',
          attributes: { # required
            'PlatformCredential' => pkey.to_s,
            'PlatformPrincipal' => cert.to_s
          }
        })

        puts "------------------ A new Application was created in AWS SNS ------------------ ".yellow
        puts "Application Name: #{app_id}".yellow
        puts "Application ARN: #{resp.platform_application_arn}".yellow
      end
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

platform :android do
  desc "Deploy app to playstore"
  desc "Params:"
  desc "stage: Application build environment"
  lane :deploy do |options|
    do_playstore(options)
  end

  desc "Generate or download key"
  desc "Params:"
  desc "force_download: true|false"
  desc "stage: true|false"
  lane :keystore do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    app_id = app_id_for('production')
    workspace = Match::GitHelper.clone(google_git_url, true)
    keystore = File.join(workspace, "#{app_id}.keystore")
    unless File.exist?(keystore) && system("cd #{workspace} && keytool -list -keystore #{app_id}.keystore -alias #{stage} -storepass #{stage_config[:storepass]}")
      unless stage_config[:common_name]
        Helper.log.error "Missing common_name"
        exit 1
      end

      unless stage_config[:organizational_unit]
        Helper.log.error "Missing common_name"
        exit 1
      end

      unless stage_config[:organization]
        Helper.log.error "Missing common_name"
        exit 1
      end

      unless stage_config[:location]
        Helper.log.error "Missing common_name"
        exit 1
      end

      unless stage_config[:state]
        Helper.log.warn "Missing state"
      end

      unless stage_config[:country]
        Helper.log.error "Missing country"
        exit 1
      end

      unless stage_config[:storepass]
        Helper.log.error "Missing storepass"
        exit 1
      end

      unless stage_config[:keypass]
        Helper.log.error "Missing keypass"
        exit 1
      end

      unless system("cd #{workspace} && keytool -genkey -v -keystore #{app_id}.keystore -dname \"CN=#{stage_config[:common_name]}, OU=#{stage_config[:organizational_unit]}, O=#{stage_config[:organization]}, L=#{stage_config[:location]}, S=#{stage_config[:state]}, C=#{stage_config[:country]}\" -alias #{stage} -keyalg RSA -keysize 2048 -validity 10000 -storepass #{stage_config[:storepass]} -keypass #{stage_config[:keypass]}")
        Helper.log.error "Unable to create or read stage key"
        Helper.log.error "Check your store/key passwords and validate they are correct"
        exit 1
      end
      message = Match::GitHelper.generate_commit_message({app_identifier: app_id, type: 'keystore'})
      Match::GitHelper.commit_changes(workspace, message, google_git_url)
    end
    keystore
  end

  private_lane :do_playstore do |options|
    build(options)
    sign(options)
    zipalign(options)
  end

  private_lane :build do |options|
    stage = options[:stage]
    stage_config = config.stages[stage]
    command = config[:cordova_command] || "cordova"

    unless system("#{command} prepare --env=#{stage}")
      Helper.log.error "Unable to prepare android project"
      exit 1
    end

    unless system("#{command} build --env=#{stage} --device --release")
      Helper.log.error "Unable to build android project"
      exit 1
    end
  end

  private_lane :sign do |options|
    keystore_path = keystore()
    stage = options[:stage]
    stage_config = config.stages[stage]

    unless File.directory?("platforms/android/build/outputs/apk")
      Helper.log.error "The apk output director does not exist"
      exit 1
    end

    Dir.glob("platforms/android/build/outputs/apk/*-release-unsigned.apk").each do |apk|
      signedapk = apk.gsub(/-unsigned.apk$/, '-unaligned.apk')
      unless system("jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore #{keystore_path} #{apk} #{stage} -storepass #{stage_config[:storepass]} -keypass #{stage_config[:keypass]} -signedjar #{signedapk}")
        Helper.log.error "Unable to sign apk: #{apk}"
        exit 1
      end
    end
  end

  private_lane :zipalign do |options|
    stage = options[:stage]
    app_id = app_id_for(stage)

    unless File.directory?("platforms/android/build/outputs/apk")
      Helper.log.error "The apk output director does not exist"
      exit 1
    end

    Dir.glob("platforms/android/build/outputs/apk/*-unaligned.apk").each do |apk|
      alignedapk = apk.gsub(/-unaligned.apk$/, '.apk')
      unless system("zipalign -v 4 #{apk} #{alignedapk}")
        Helper.log.error "Could not zipalign the apk"
        exit 1
      end
    end
  end
end

# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
